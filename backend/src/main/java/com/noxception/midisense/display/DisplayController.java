package com.noxception.midisense.display;

import com.noxception.midisense.api.DisplayApi;
import com.noxception.midisense.config.MIDISenseConfig;
import com.noxception.midisense.display.exceptions.InvalidTrackException;
import com.noxception.midisense.display.rrobjects.*;
import com.noxception.midisense.interpreter.exceptions.InvalidDesignatorException;
import com.noxception.midisense.models.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

/**
 * Class that invokes Display service methods by interpreting requests made to endpoints outlined
 * by the DisplayAPI interface, a service layer framework generated by Swagger 2.0.
 *
 * This class handles mapping between service layer request and response bodies, and business layer service request
 * and response objects. Any errors that are encountered by the service during method calls are interpreted
 * and dealt with here.
 *
 * For a detailed description of the controller interface, see {@link DisplayApi} for the definition
 * generated from the openAPI specification application.yaml.
 *
 * For a detailed description of the controller endpoints, please visit http://host:port/swagger-ui.html#/
 * when the Spring application is running.
 *
 *  * @author Adrian Rae
 *  * @author Claudio Teixeira
 *  * @author Hendro Smit
 *  * @author Mbuso Shakoane
 *  * @author Rearabetswe Maeko
 *  * @since 1.0.0
 */
@CrossOrigin("*")
@RestController
public class DisplayController implements DisplayApi {

    @Autowired
    DisplayServiceImpl displayService;

    /** Method that invokes the getPieceMetadata method of the Display service and presents the resultant metadata of
     * the work with a specific designator.
     *
     * @param body the request body as interpreted by the service layer framework. See {@link DisplayApi}
     * @return a tuple of the appropriate http status code and response object:
     * Possible valid tuples are a 200 status code and an object that is not null corresponding to
     * a successful request, or a 400 status code and a null object corresponding to a malformed request field.
     */
    @Override
    public ResponseEntity<DisplayGetPieceMetadataResponse> getPieceMetadata(DisplayGetPieceMetadataRequest body) {

        DisplayGetPieceMetadataResponse responseObject = new DisplayGetPieceMetadataResponse();
        HttpStatus returnStatus = HttpStatus.OK;

        try{
            UUID fileDesignator = UUID.fromString(body.getFileDesignator());

            GetPieceMetadataRequest req = new GetPieceMetadataRequest(fileDesignator);
            GetPieceMetadataResponse res = displayService.getPieceMetadata(req);

            responseObject.setKeySignature(res.getKeySignature().toString());

            responseObject.setTempoIndication(res.getTempoIndication().getTempo());

            DisplayGetPieceMetadataResponseTimeSignature timeSignature = new DisplayGetPieceMetadataResponseTimeSignature();
            timeSignature.setBeatValue(res.getTimeSignature().getBeatValue());
            timeSignature.setNumBeats(res.getTimeSignature().getNumBeats());

            responseObject.setTimeSignature(timeSignature);

        }
        catch(InvalidDesignatorException | IllegalArgumentException e){

            returnStatus = HttpStatus.BAD_REQUEST;
            responseObject = null;

        }

        return new ResponseEntity<>(responseObject,returnStatus);
    }

    /** Method that invokes the getTrackInfo method of the Display service and presents the resultant track list of
     * the work with a specific designator.
     *
     * @param body the request body as interpreted by the service layer framework. See {@link DisplayApi}
     * @return a tuple of the appropriate http status code and response object:
     * Possible valid tuples are a 200 status code and an object that is not null corresponding to
     * a successful request, or a 400 status code and a null object corresponding to a malformed request field.
     */
    @Override
    public ResponseEntity<DisplayGetTrackInfoResponse> getTrackInfo(DisplayGetTrackInfoRequest body) {

        DisplayGetTrackInfoResponse responseObject = new DisplayGetTrackInfoResponse();
        HttpStatus returnStatus = HttpStatus.OK;

        try{

            UUID fileDesignator = UUID.fromString(body.getFileDesignator());

            GetTrackInfoRequest req = new GetTrackInfoRequest(fileDesignator);
            GetTrackInfoResponse res = displayService.getTrackInfo(req);

            for(byte index: res.getTrackIndices()){

                String trackName = res.getTrackMap().get(index);
                DisplayGetTrackInfoResponseInner inner = new DisplayGetTrackInfoResponseInner();

                inner.setIndex((int) index);
                inner.setTrackName(trackName);

                responseObject.add(inner);
            }
        }
        catch(InvalidDesignatorException | IllegalArgumentException e){

            returnStatus = HttpStatus.BAD_REQUEST;
            responseObject = null;

        }
        return new ResponseEntity<>(responseObject,returnStatus);
    }

    /** Method that invokes the getTrackMetadata method of the Display service and presents the resultant note metadata of
     * the track with a specific index within a file with set designator.
     *
     * @param body the request body as interpreted by the service layer framework. See {@link DisplayApi}
     * @return a tuple of the appropriate http status code and response object:
     * Possible valid tuples are a 200 status code and an object that is not null corresponding to
     * a successful request, or a 400 status code and a null object corresponding to a malformed request field.
     */
    @Override
    public ResponseEntity<DisplayGetTrackMetadataResponse> getTrackMetadata(DisplayGetTrackMetadataRequest body) {

        DisplayGetTrackMetadataResponse responseObject = new DisplayGetTrackMetadataResponse();
        HttpStatus returnStatus = HttpStatus.OK;

        try{

            UUID fileDesignator = UUID.fromString(body.getFileDesignator());
            int trackIndex = body.getTrackIndex();

            GetTrackMetadataRequest req = new GetTrackMetadataRequest(fileDesignator,(byte) trackIndex);
            GetTrackMetadataResponse res = displayService.getTrackMetadata(req);

            responseObject.setTrackString(res.getTrackString());

        }
        catch(InvalidDesignatorException | IllegalArgumentException | InvalidTrackException e){

            returnStatus = HttpStatus.BAD_REQUEST;
            responseObject = null;

        }
        return new ResponseEntity<>(responseObject,returnStatus);
    }

    /** Method that invokes the getTrackOverview method of the Display service and presents the resultant summary of
     * the resultant note metadata of the track with a specific index within a file corresponding to the set designator.
     *
     * @param body the request body as interpreted by the service layer framework. See {@link DisplayApi}
     * @return a tuple of the appropriate http status code and response object:
     * Possible valid tuples are a 200 status code and an object that is not null corresponding to
     * a successful request, or a 400 status code and a null object corresponding to a malformed request field.
     */
    @Override
    public ResponseEntity<DisplayGetTrackOverviewResponse> getTrackOverview(DisplayGetTrackOverviewRequest body) {

        DisplayGetTrackOverviewResponse responseObject = new DisplayGetTrackOverviewResponse();
        HttpStatus returnStatus = HttpStatus.OK;

        try{

            UUID fileDesignator = UUID.fromString(body.getFileDesignator());
            int trackIndex = body.getTrackIndex();

            GetTrackOverviewRequest req = new GetTrackOverviewRequest(fileDesignator,(byte) trackIndex);
            GetTrackOverviewResponse res = displayService.getTrackOverview(req);

            responseObject.addAll(res.getPitchArray());
            
        }
        catch(InvalidDesignatorException | IllegalArgumentException | InvalidTrackException e){

            returnStatus = HttpStatus.BAD_REQUEST;
            responseObject = null;

        }
        return new ResponseEntity<>(responseObject,returnStatus);
    }

}
