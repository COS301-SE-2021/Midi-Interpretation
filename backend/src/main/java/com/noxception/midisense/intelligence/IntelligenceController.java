package com.noxception.midisense.intelligence;

import com.noxception.midisense.api.IntelligenceApi;
import com.noxception.midisense.config.MIDISenseConfig;
import com.noxception.midisense.intelligence.dataclass.GenrePredication;
import com.noxception.midisense.intelligence.exceptions.EmptyChordException;
import com.noxception.midisense.intelligence.exceptions.MissingStrategyException;
import com.noxception.midisense.intelligence.rrobjects.AnalyseChordRequest;
import com.noxception.midisense.intelligence.rrobjects.AnalyseChordResponse;
import com.noxception.midisense.intelligence.rrobjects.AnalyseGenreRequest;
import com.noxception.midisense.intelligence.rrobjects.AnalyseGenreResponse;
import com.noxception.midisense.intelligence.strategies.DecisionTreeChordAnalysisStrategy;
import com.noxception.midisense.intelligence.strategies.NeuralNetworkGenreAnalysisStrategy;
import com.noxception.midisense.interpreter.exceptions.InvalidDesignatorException;
import com.noxception.midisense.models.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.DependsOn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

/**
 * Class that invokes intelligence service methods by interpreting requests made to endpoints outlined
 * by the IntelligenceAPI interface, a service layer framework generated by Swagger 2.0.
 *
 * This class handles mapping between service layer request and response bodies, and business layer service request
 * and response objects. Any errors that are encountered by the service during method calls are interpreted
 * and dealt with here.
 *
 * For a detailed description of the controller interface, see {@link IntelligenceApi} for the definition
 * generated from the openAPI specification application.yaml.
 *
 * For a detailed description of the controller endpoints, please visit http://host:port/swagger-ui.html#/
 * when the Spring application is running.
 *
 *  * @author Adrian Rae
 *  * @author Claudio Teixeira
 *  * @author Hendro Smit
 *  * @author Mbuso Shakoane
 *  * @author Rearabetswe Maeko
 *  * @since 1.0.0
 */

@Slf4j
@CrossOrigin("*")
@RestController
@DependsOn({"configurationLoader"})
public class IntelligenceController implements IntelligenceApi {


    private final IntelligenceServiceImpl intelligenceService;

    @Autowired
    public IntelligenceController(IntelligenceServiceImpl intelligenceService) {
        this.intelligenceService = intelligenceService;
    }

    @Override
    public ResponseEntity<IntelligenceAnalyseGenreResponse> analyseGenre(IntelligenceAnalyseGenreRequest body) {
        //create response object and set return status
        IntelligenceAnalyseGenreResponse responseObject = new IntelligenceAnalyseGenreResponse();
        HttpStatus returnStatus = HttpStatus.OK;

        try{
            //pass file designator into request object
            UUID fileDesignator = UUID.fromString(body.getFileDesignator());

            AnalyseGenreRequest req = new AnalyseGenreRequest(fileDesignator);

            //Log the call for request
            log.info(String.format("Request | To: %s | For: %s | Assigned: %s","analyseGenre",fileDesignator,req.getDesignator()));

            //assign genre strategy if no strategy is found
            if(!intelligenceService.hasGenreStrategy())
                intelligenceService.attachGenreStrategy(new NeuralNetworkGenreAnalysisStrategy(new MIDISenseConfig()));

            //create response object
            AnalyseGenreResponse res = intelligenceService.analyseGenre(req);

            //set list of recommended genres
            List<IntelligenceAnalyseGenreResponseGenreArray> list = new ArrayList<>();
            for(GenrePredication genre: res.getGenreArray()){
                IntelligenceAnalyseGenreResponseGenreArray inner = new IntelligenceAnalyseGenreResponseGenreArray();
                inner.setName(genre.getGenreName());
                inner.setCertainty(BigDecimal.valueOf(genre.getCertainty()));
                list.add(inner);

            }
            responseObject.setGenreArray(list);

            responseObject.setSuccess(true);
            responseObject.setMessage("Successfully analysed file");

        }
        catch(InvalidDesignatorException | IllegalArgumentException | MissingStrategyException e){

            //Log the error
            log.warn(String.format("FAILURE | To: %s | Because: %s ","analyseGenre",e.getMessage()));

            returnStatus = HttpStatus.BAD_REQUEST;
            responseObject.setSuccess(false);
            responseObject.setMessage(e.getMessage());

        }
        //return the response object
        return new ResponseEntity<>(responseObject,returnStatus);
    }

    @Override
    public ResponseEntity<IntelligenceAnalyseChordResponse> analyseChord(IntelligenceAnalyseChordRequest body) {
        IntelligenceAnalyseChordResponse responseObject = new IntelligenceAnalyseChordResponse();
        HttpStatus returnStatus = HttpStatus.OK;

        try{

            //get the pitch array inputted as a list of bytes
            List<Integer> inputList = body.getPitchArray();
            int numPitches = inputList.size();

            byte[] pitchArray = new byte[numPitches];
            for(int i=0; i<numPitches; i++){
                pitchArray[i] = inputList.get(i).byteValue();
            }

            //make the request
            AnalyseChordRequest req = new AnalyseChordRequest(pitchArray);

            //Log the call for request
            log.info(String.format("Request | To: %s | For: %s | Assigned: %s","analyseChord", Arrays.toString(pitchArray),req.getDesignator()));

            //perform analysis
            if(!intelligenceService.hasChordStrategy())
                intelligenceService.attachChordStrategy(new DecisionTreeChordAnalysisStrategy());
            AnalyseChordResponse res = intelligenceService.analyseChord(req);

            //get the chord info, return it
            IntelligenceAnalyseChordResponseChord chord = new IntelligenceAnalyseChordResponseChord();
            chord.setRootPitch((int) res.getRootPitch());
            chord.setInversionPitch((int) res.getInversionPitch());
            chord.setChordType(res.getChordType());
            chord.setSimpleName(res.getChord());


            responseObject.setChord(chord);

            responseObject.setSuccess(true);
            responseObject.setMessage("Successfully analysed chord");

        }
        catch(IllegalArgumentException | MissingStrategyException |EmptyChordException e){

            //Log the error
            log.warn(String.format("FAILURE | To: %s | Because: %s ","analyseChord",e.getMessage()));

            returnStatus = HttpStatus.BAD_REQUEST;
            responseObject.setSuccess(false);
            responseObject.setMessage(e.getMessage());

        }

        return new ResponseEntity<>(responseObject,returnStatus);
    }

}
